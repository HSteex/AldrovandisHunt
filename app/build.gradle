plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.devtools.ksp'
    id 'androidx.room'
}

room {
    schemaDirectory "$projectDir/schemas"
}

android {
    namespace 'com.example.aldrovandishunt'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.aldrovandishunt"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.3'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"

    implementation 'androidx.compose.material3:material3:1.1.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation(platform('androidx.compose:compose-bom:2024.01.00'))
    def nav_version = '2.7.6'

    implementation("androidx.navigation:navigation-compose:$nav_version")

    implementation "androidx.datastore:datastore-preferences:1.0.0"

    implementation 'com.google.dagger:hilt-android:2.50'
    kapt 'com.google.dagger:hilt-compiler:2.50'

    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'

    def room_version = '2.6.1'

    // Room
    implementation "androidx.room:room-runtime:$room_version"

    ksp "androidx.room:room-compiler:$room_version"

    // Optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    //gps
    implementation 'com.google.android.gms:play-services-location:21.1.0'
    //volley
    implementation 'com.android.volley:volley:1.2.1'

    implementation 'io.coil-kt:coil-compose:2.5.0'

    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"

    implementation "com.google.accompanist:accompanist-permissions:0.19.0"

    def filament_version = '1.49.3'
    api "com.google.android.filament:filament-android:$filament_version"
    api "com.google.android.filament:gltfio-android:$filament_version"
    api "com.google.android.filament:filament-utils-android:$filament_version"

    //Sceneview AR edition
    implementation 'io.github.sceneview:arsceneview:2.0.3'

    //Less useful libraries
    //Konfetti
    implementation 'nl.dionsegijn:konfetti-compose:2.0.4'
}

//class RoomSchemaArgProvider implements CommandLineArgumentProvider {
//
//    @InputDirectory
//    @PathSensitive(PathSensitivity.RELATIVE)
//    File schemaDir
//
//    RoomSchemaArgProvider(File schemaDir) {
//        this.schemaDir = schemaDir
//    }
//
//    @Override
//    Iterable<String> asArguments() {
//        // Note: If you're using KSP, you should change the line below to return
//        // ["room.schemaLocation=${schemaDir.path}"]
//        return ["room.schemaLocation=${schemaDir.path}"]
//    }
//}

//ksp {
//    arg(new RoomSchemaArgProvider(new File(projectDir, "schemas")))
//}

kapt {
    correctErrorTypes = true
}